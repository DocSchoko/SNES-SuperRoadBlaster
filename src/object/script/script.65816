.include "src/object/script/script.h"
.section "script class"
/*
there is no dedicated script language, just assembler simplified by general macros.
the main difference between regular objects and scripts is that scripts halt/save/continue each frame, which makes waiting for events much easier.


*/


/**
* instanciate script.
*
* @param 1 int<16bit>	start adress of script in bank 0, must have magic signature
*/
  METHOD init
	rep #$31
	lda OBJECT.CALL.ARG.1,s
	pha
	tax
	lda.l (BSL << 16),x
	cmp #SCRIPT_MAGIC
	beq _initScriptNotInvalid
      TRIGGER_ERROR E_BadScript

_initScriptNotInvalid:
	pla
	sta script.initAdress
	inc a	;skip signature magic and adjust for jump offset
	sta this.currPC
	php
	phb
	pla
	and.w #%1111101111111111	;exclude irq flag
	sta this.buffFlags
	
	jsr abstract.Script.initAge
	jsr _initHashPointers

	bra _play	;need to stay on same stack-tier here

_collectGarbage:
	php
	rep #$31
	ldy #NumOfHashptr
	ldx #hashPtr

	;kill all objects that were instanciated in current script 
	;@TODO: does this even work anymore??
-		lda #0
		phy
		phx
		ldy #Script.kill.MTD
		jsr core.object.call
		plx
		ply
		txa
		clc
		adc #_sizeof_oopObjHash
		tax
		dey
		bne -
	
	plp
	rts

;init obj hash pointers, mark as "empty, pointing to no obj"
_initHashPointers:
	php
	rep #$31
	ldy #NumOfHashptr
	ldx #0

-		lda #oopCreateNoPtr
		sta hashPtr.1.pntr,x
		txa
		clc
		adc #_sizeof_oopObjHash
		tax
		dey
		bne -
	plp
	rts


  METHOD play
	rep #$31
	tsc
	dec a	;target is one subroutine tier deeper
	dec a
	sta this.buffStack

	php
	php
	pla
	and.w #%100	;preserve irq flag
	ora this.buffFlags
	pha
	
	lda this.buffA
	ldx this.buffX
	ldy this.buffY
	plb
	plp
	pea _return-1	;push return adress
	pei (this.currPC)	;push target subroutine adress

_return:
	rts	;this is actually a jump to subroutine on stack, then return


  METHOD getScriptAdress
	rep #$31
	lda script.initAdress
	rts

SavePC:
	php
	phb
	rep #$31
	sta this.buffA
	pla
	and.w #%1111101111111111	;exclude irq flag
	sta this.buffFlags
	lda 1,s	;save adress before savePC was called
	dec a
	dec a
	dec a	;one more for rts-jump
	sta this.currPC
	stx this.buffX
	sty this.buffY
	rts

/**
* global state hack. Checks whether input frame number has been met.
*
* @todo: remove this hack asap
*
* @param a<int,16bit>	frame number to check
* @return c<bool>	true if requested frame number has been met
*/
GLOBAL.checkFrameReachedSavePc:
  php
  phb
  rep #$31
  sta this.buffA
  pla
  and.w #%1111101111111111	;exclude irq flag
  sta this.buffFlags
  lda 1,s	;save adress before savePC was called
  dec a
  dec a
  dec a	;one more for rts-jump
  sta this.currPC
  stx this.buffX
  sty this.buffY
  pei (this.buffA)
  lda.l GLOBAL.currentFrame
  cmp 1,s
  pla
    bcc +
  rts

;do double return if target not reached
+   pla
    rts

WaitReturn:
	rts

;script obj kill routine, for external calls
  METHOD kill
	rep #$31
	lda #OBJR_kill	;lastly, kill script instance itself
	sta 3,s	
	rts

;script termination routine, called from within script
;you can absolutely not be sure that youre still running in the proper context here!!
terminateScript:
	rep #$31
	lda this.buffStack
	tsc
	cmp this.buffStack
	beq _terminateScriptStackOk
        TRIGGER_ERROR E_ScriptStackTrash

_terminateScriptStackOk:
	lda #OBJR_kill	;lastly, kill script instance itself
	sta 5,s	
	rts

  CLASS Script getScriptAdress
.ends
