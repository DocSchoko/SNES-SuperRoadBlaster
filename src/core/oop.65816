/*
purpose:
have a basic class/object system with own memory range for each obj.
features:
-error handling:
	-obj routines report errors that are processed by oop-handler
	-oop-handler checks stack/dp on return
	-nmi checks execution length (with unique obj-id per frame) and reports stall after predefined amount of frames
	-have one extra byte in obj-dp to check for boundary overflow(useful???)

-oop handler:
	-has a list of all currently active objects
	-terminates object on return code 
	-process all objects each frame
	-each object must return a pointer to itself(what?why???)

-direct page:
	-each obj has its own, dynamically allocated dp-area
	-when terminating objs, dp-adress of all objs that have their dp above that objs dp-adress need to have their dp relocated.(mark all objs above, mvn by length of terminated obj)


*/

.include "src/core/oop.h"
.section "oophandler"

;clear oop stack
core.object.init:
	php
	phd
	rep #$31
	lda #ZP
	tcd
	lda #0
	ldy #OopStackEnd-OopStack
	ldx #OopStack
	jsr ClearWRAM

	lda #oopStackTst
	sta.w STACK_strt
	sta.w STACK_end
	stz OopObjSlotPtr
	stz OopObjRamPtr
	lda #0
	sta.l GLOBAL.garbagePresent

	jsr initUndefStrs
	pld
	plp
	rts

;in:y=number of object to create, a:call parameter x:pointer
core.object.create:
	php
	phd
	rep #$31

	pha
	tdc

	pea ZP
	pld

	;map zp-adress to full ram adress.(this means supplied direct,full adresses can't be lower than $100)
	sta tmp
	txa
	cmp #$ff
	bcs +
		clc		;add direct page pointer if supplied hash pointer is <$ff(=zp)
		adc tmp
		tax

+	stx tmp+6
	lda.w Hash.id,y
	and.w #$ff
	sta.l GLOBAL.currentObject
	sta.l GLOBAL.currentClass
	lda #0
	sta.l GLOBAL.currentMethod
	;copy parameters here
	lda 22,s
	sta tmp+18
	lda 20,s
	sta tmp+20
	lda 18,s
	sta tmp+22
	lda 16,s
	sta tmp+24
	lda 14,s
	sta tmp+26
	lda 12,s
	sta tmp+28
	lda 10,s
	sta tmp+30
	lda 8,s
	sta tmp+32
	pla	
	sta tmp+11	;save parameter
	tya	;object number

	jsr OopObjFetchPointer


	ldy #OOPR.flags	;singleton?
	lda [tmp+1],y
	lsr a
	bcc createOopObjNoSingleton
		ldx #0
		ldy #OOPR.id
		lda [tmp+1],y
		jsr OopSeekObjId
		bcc createOopObjNoSingleton

			lda.l OopStack.id,x
			sta tmp+8	;save class id
			lda.l OopStack.num,x
			sta tmp+9
			stx tmp+4
			jsr OopHandlerSaveObjPtr

			pld
			plp
			rts

createOopObjNoSingleton:

	ldx #0
	jsr OopSeekFreeSlot	;a: relative pointer to slot
	sta tmp+4		;save relative slot pointer

	sep #$20
	ldy #OOPR.flags	;save flags
	lda [tmp+1],y
	sta.l OopStack.flags,x

	ldy #OOPR.id
	lda [tmp+1],y
	sta.l OopStack.id,x
	sta tmp+8	;save class id 
	rep #$31

	;store default properties
	ldy #OOPR.properties
	lda [tmp+1],y
	sta.l OopStack.properties,x

	lda.w OopObjCount
	sta.l OopStack.num,x
	sta tmp+9
	inc.w OopObjCount

	;copy routine pointers
	lda tmp+1
	clc
	adc #OOPR.rInit
	sta.l OopStack.init,x
	lda tmp+1
	clc
	adc #OOPR.rPlay
	sta.l OopStack.play,x
	lda tmp+1
	clc
	adc #OOPR.rKill
	sta.l OopStack.kill,x

	ldy #OOPR.zpLen		;allocate ram for obj
	lda [tmp+1],y
	and #$ff
	pha
	clc
	adc OopObjRamPtr
	cmp #OopObjRamEnd-OopObjRam
	bcc createOopObjRamAllocNoOver

		;no memory left for malloc, throw error
        TRIGGER_ERROR E_ObjRamFull


createOopObjRamAllocNoOver:
	;clear memory for this obj
	ply			;clear length
	lda #OopObjRam
	clc
	adc OopObjRamPtr
	sta.l OopStack.dp,x	;store ram base for this obj
	phx
	tax				;clear offset

	tya				;update objram-ptr
	clc
	adc OopObjRamPtr
	sta	OopObjRamPtr
	lda #0		;clear byte
	jsr ClearWRAM

	jsr OopHandlerCopyDefaults
	plx

	txa
	clc
	adc #_sizeof_oopStackObj
	cmp OopObjSlotPtr
	bcc +
		sta OopObjSlotPtr				;try to keep track of highest obj stack pointer to speed up obj loops
	
+	lda.l OopStack.flags,x	;set "init complete"-flag
	ora #OBJECT.FLAGS.InitOk
	sta.l OopStack.flags,x

	jsr OopHandlerSaveObjPtr

	lda.l OopStack.init,x	;exec init routine
	ldy tmp+11
	jsr OopHandlerExecute

	pld
	plp
	sec	;always return carry true on object creation, dont allow constructor to return value
	rts

/**
* copy class defaults to object zp (self and properties)
*
* @param tmp+4<16bit>	pointer to object in object stack
*/

OopHandlerCopyDefaults:
  php
  rep #$31

  ;x, get pointer to current obj in obj stack
  ldx.b tmp+4

  ;y, get pointer to current objs zero page block
  lda.l OopStack.dp,x
  tay

  ;store hash pointer to self. this will fuck up if hash pointer format is ever changed.
  lda.l OopStack.id,x
  sta.w iterator.self,y
  lda.l OopStack.num,x
  sta.w iterator.self + 1,y
  ;lda.l OopStack.pntr,x	;WRONG!!! this is the rom pointer, not the object stack pointer!!
  txa
  sta.w iterator.self + 2,y

  ;store object default properties
  lda.l OopStack.properties,x
  sta.w iterator.properties,y
  plp
  rts

;save object hash to return pointer
;hash format: 4 bytes:
;0 obj id
;1 number of createobj calls
;2-3 relative obj pointer in obj array

OopHandlerSaveObjPtr:
	php
	pha
	phx
	phy
	rep #$31
	ldx tmp+6	;return pointer
	cpx #oopCreateNoPtr
	beq OopHandlerSaveObjPtrCancel
	
		lda tmp+8	;obj id
		sta.w Hash.id,x
		lda tmp+9	;coo-count
		sta.w Hash.count,x
		lda tmp+4 ;relative ptr to obj
		sta.w Hash.pntr,x
	
	OopHandlerSaveObjPtrCancel:
	ply
	plx
	pla
	plp
	rts

;gets 8bit obj class number from a, puts 24bit pointer to obj into tmp1
OopObjFetchPointer:
	php
	rep #$31
	phx
	and #$ff
	sta tmp
	asl a
	clc
	adc tmp
	tax
	lda.l OopClassLut,x
	sta tmp+1
	lda.l OopClassLut+1,x
	sta tmp+2
	plx
	plp
	rts

SetupCurrentObjectStringPointers:
  php
  rep #$31
  lda.l GLOBAL.currentObject
  jsr OopObjFetchPointer

  lda tmp+2				;get bank
  sta.l GLOBAL.currentObjectStr+1	

  ldy #OOPR.nClass	;get class name(relative ptr)
  lda [tmp+1],y
  clc
  and #$ff
  adc tmp+1
  sta.l GLOBAL.currentObjectStr

  lda.l GLOBAL.currentClass
  jsr OopObjFetchPointer

  lda tmp+2				;get bank
  sta.l GLOBAL.currentClassStr+1	

  ldy #OOPR.nClass	;get class name(relative ptr)
  lda [tmp+1],y
  clc
  and #$ff
  adc tmp+1
  sta.l GLOBAL.currentClassStr	

  lda.l GLOBAL.currentMethod
  and #$ff
  pha
  asl a
  clc
  adc 1,s
  pla
  ldy #OOPR.nInit	;get method name(relative ptr)

  lda tmp+2				;get bank
  sta.l GLOBAL.currentMethodStr+1	

  lda [tmp+1],y
  clc
  and #$ff
  adc tmp+1
  sta.l GLOBAL.currentMethodStr

  plp
  rts


;rep #$31,out:a,16bit:relative pointer to free slot
;x:start offset. this must be a valid relative pointer to obj-slot
OopSeekFreeSlot:
.INDEX 16
.ACCU 16
	OopSeekFreeSlotLoop:
		;seek for slots that have no object present and that dont have garbage collection pending
		lda.l OopStack.flags,x
		bit #OBJECT.FLAGS.Present
		bne +

		bit #OBJECT.FLAGS.DeleteScheduled
		beq OopSeekFreeSlotFound
	
+		txa
		clc
		adc #_sizeof_oopStackObj
		tax
		cmp #OopStackEnd-OopStack
		bcc OopSeekFreeSlotLoop

    TRIGGER_ERROR E_ObjLstFull

OopSeekFreeSlotFound:

	txa
	sec
	rts

;in:a,8bit: obj id
OopSeekObjId:
	.INDEX 16
	.ACCU 16
	and #$ff
	sta tmp+4

OopSeekObjIdLoop:
		lda.l OopStack.flags-1,x
		bpl OopSeekObjIdNoObj

		lda.l OopStack.id,x
		and #$ff
		cmp tmp+4
		beq OopSeekObjIdFound
	
	OopSeekObjIdNoObj:	
		txa
		clc
		adc #_sizeof_oopStackObj
		tax
		cmp #OopStackEnd-OopStack
		bcc OopSeekObjIdLoop

	clc
	rts

OopSeekObjIdFound:
	txa
	sec
	rts

;in:a,16bit: obj id(lo),count(hi)
OopSeekObjCountId:
	.INDEX 16
	.ACCU 16
	and #$ff
	sta tmp+4
OopSeekObjCountIdLoop:
		lda.l OopStack.flags-1,x
		bpl OopSeekObjCountIdNoObj

		sep #$20
		lda.l OopStack.num,x
		xba
		lda.l OopStack.id,x
		rep #$31

		cmp tmp+4
		beq OopSeekObjCountIdFound
	
		OopSeekObjCountIdNoObj:	
		txa
		clc
		adc #_sizeof_oopStackObj
		tax
		cmp #OopStackEnd-OopStack
		bcc OopSeekObjCountIdLoop

	clc
	rts

OopSeekObjCountIdFound:
	txa
	sec
	rts


core.object.play:
	php
	phb
	sep #$20
	lda #RAM
	pha
	plb
	rep #$31
	phd
	lda #ZP		;set dp reg to base
	tcd
	pla
	sta dpBuffr	;save direct page
	ldx #0

	;clear parameters here
	stz tmp+18
	stz tmp+20
	stz tmp+22
	stz tmp+24
	stz tmp+26
	stz tmp+28
	stz tmp+30
	stz tmp+32

OopHandlerLoop:
		lda.l OopStack.flags-1,x	;get flags
		bpl ++	;exit if all active objects have been processed

            lda.l OopStack.play,x

+			ldy #0	;clear parameter
			phx
			jsr OopHandlerExecute
			plx
	
++		txa	;update pntr
		clc
		adc #_sizeof_oopStackObj
		tax
		cpx OopObjSlotPtr
		bcc OopHandlerLoop	;loop till > last obj
		beq	OopHandlerLoop

	jsr collectGarbage

	lda dpBuffr
	tcd
	plb
	plp
	rts

;executes oop routine. in: a,16bit=exec adress pointer in bank $c0. x,16bit=relative oopstack pointer. y,16bit:put into a at call time, parameter
OopHandlerExecute:
	sta tmp	;store exec adress
	lda.w OopStack.num,x	;push fingerprint
	pha
	lda.w OopStack.id,x
	and #$ff
	pha

	phx
    pei (tmp+32)
    pei (tmp+30)
    pei (tmp+28)
    pei (tmp+26)
    pei (tmp+24)
    pei (tmp+22)
    pei (tmp+20)
    pei (tmp+18)

	lda.l OopStack.dp,x	;set direct page
	ldx tmp
	tcd

	pea OBJR_noErr	;set return error code
	tya
	jsr (0,x)
	rep #$30
	pea ZP		;set dp reg to base
	pld
	sta tmp+10	;save return data
	stx tmp+12
	sty tmp+14
	rol tmp+16	;save carry return value
	pla
	sta errCurr

	pla		;empty parameter pull
	pla
	pla
	pla
	pla
	pla
	pla
	pla

	plx

	pla
	sta tmp
	pla
	sta tmp+2
	
	;verify fingerprint, check if obj is still there.
	lda.w OopStack.id,x
	and #$ff
	cmp tmp
	bne execObjGone
	
	lda.w OopStack.num,x
	cmp tmp+2
	bne execObjGone

	lda errCurr
	and #$ff	;check if object returned error
	beq OopHandlerNoError

	cmp #OBJR_kill
	beq OopHandlerObjTerminate
		;exception, process error
		pha
		jsr core.error.trigger

		
	OopHandlerObjTerminate:
	lda.w OopStack.flags,x
	bit #OBJECT.FLAGS.Persistent
	bne OopHandlerNoError	;obj is persistent
	
	lda.w (OopStack.flags & $ffff)-1,x	;don't exec kill routine again if obj already deleted(prevent inf.loop)
	bpl OopHandlerNoError

		;don't delete immediately. flag as scheduled for deletion instead. will be collected by garbage collector soon
		lda.w OopStack.flags,x	;delete obj
		and #OBJECT.FLAGS.Present ~$ffff
		ora #OBJECT.FLAGS.DeleteScheduled
		sta.w OopStack.flags,x

		;set flag to make sure garbage collector only runs when required
		lda #TRUE
		sta.w GLOBAL.garbagePresent

	;explicitly calling kill routine isn't neccessary. external callers call obj kill routine, which in turn returns kill signal.
	;objects killing themselves can either jsr to their kill routine directly if neccessary or else just return kill signal themselves

OopHandlerNoError:
	lda #oopStackTst
	cmp.w STACK_strt
	bne OopHandlerStackOverflow

	lda #oopStackTst
	cmp.w STACK_end
	bne OopHandlerStackUnderflow

	lda tmp+10	;save return data
	ldx tmp+12
	ldy tmp+14

	rts

;object is no longer in it's place(moved or deleted)
execObjGone:

    TRIGGER_ERROR E_ObjStackCorrupted


OopHandlerStackError:
	pea E_StackTrash
	bra OopHandlerErrPrint

OopHandlerStackOverflow:
	pea E_StackOver
	bra OopHandlerErrPrint

OopHandlerStackUnderflow:
	pea E_StackUnder
	bra OopHandlerErrPrint

OopHandlerSubError:
OopHandlerErrPrint:
	jsr core.error.trigger

/**
* seek all objects flagged as scheduled for deletion, delete them in oop stack, then free and reorganize zp-ram
*/
collectGarbage:
  .accu 16
  .index 16
  php
  rep #$31
  lda.l GLOBAL.garbagePresent
  beq noGarbage
	ldx.w #0

	collectGarbageLoop:
	  ;seek deletable objects
	  lda.l OopStack.flags,x	;get flags
	  and.w #OBJECT.FLAGS.DeleteScheduled
	  beq collectGarbageSkip

		  lda.l OopStack.flags,x	;hard-delete obj for good
		  and #$ff00
		  sta.l OopStack.flags,x

		  jsr OopHandlerObjRamReorder

	collectGarbageSkip:
	  txa	;update pntr
	  clc
	  adc #_sizeof_oopStackObj
	  tax
	  cpx OopObjSlotPtr
	  bcc collectGarbageLoop	;loop till > last obj
	  beq collectGarbageLoop

	;reset garbage flag
	lda #0
	sta.l GLOBAL.garbagePresent

noGarbage:
  plp
  rts



;input: x,16bit=current obj ram ptr
;rearranges obj-ram on obj kill, updates dp-pointers of all subsequent dp-buffers
OopHandlerObjRamReorder:
  .accu 16
  .index 16
	phx
	phy
	lda.l OopStack.dp,x
	sta tmp+4
	lda.l OopStack.id,x
	jsr OopObjFetchPointer
	ldy #OOPR.zpLen ;get length of zp-ramblock
	lda [tmp+1],y
	and #$ff
	sta tmp+8
	clc
	adc tmp+4
	tax				;source: obj ramblock end
	sta tmp+6

	ldy tmp+4	;target: obj ramblock base
	lda OopObjRamPtr	;calc transfer len, get relative active obj end
	clc
	adc #OopObjRam-1	;make absolute,-1 for mvn length
	sec
	sbc tmp+6
	bcc RamReorderSkip	;don't mvn if length=0-1

		mvn RAM,RAM
		ldx #0
		jsr RelocateRamUpdateDpPointers

RamReorderSkip:
	lda OopObjRamPtr		;update ram end pntr
	sec
	sbc tmp+8						;substract ramblock-length of deleted obj
	sta OopObjRamPtr

	jsr AdjustObjSlotPntr

	ply
	plx
	rts

RelocateRamUpdateDpPointers:
	_UpdateDpPointersLoop:
		lda.l OopStack.flags,x
		bit #OBJECT.FLAGS.Present
		bne +

		bit #OBJECT.FLAGS.DeleteScheduled
		beq _UpdateDpPointersSkip
	
+
			lda.l OopStack.dp,x
			cmp tmp+4
			bcc _UpdateDpPointersSkip	;skip if obj ram dp counter lower than that of deleted obj
		
				sec
				sbc tmp+8	;adjust pointer by zp-ramblock-length of killed obj
				sta.l OopStack.dp,x
			
	_UpdateDpPointersSkip:
		txa
		clc
		adc #_sizeof_oopStackObj
		tax
		cmp OopObjSlotPtr
		bcc _UpdateDpPointersLoop
	rts

;shave some size off objSlotPntr if possible
AdjustObjSlotPntr:
  .accu 16
  .index 16
	;skip if we're already at first object
	lda OopObjSlotPtr
	beq +
		;check if deleted obj was last. if yes, decrease objslotptr
		sec
		sbc #_sizeof_oopStackObj
		tax
		lda.l OopStack.flags,x
		bit #(OBJECT.FLAGS.Present | OBJECT.FLAGS.DeleteScheduled)
		bne +
			;recursively seek till last active obj
			stx OopObjSlotPtr
			jsr AdjustObjSlotPntr

+	rts

initUndefStrs:
	phx
	phy
	php
	sep #$20
	lda #:T_EXCP_undefined
	sta.l GLOBAL.currentMethodStr+2
	sta.l GLOBAL.currentObjectStr+2
	sta.l GLOBAL.currentClassStr+2
	rep #$31
	lda #T_EXCP_undefined
	sta.l GLOBAL.currentMethodStr
	sta.l GLOBAL.currentObjectStr
	sta.l GLOBAL.currentClassStr
	plp
	ply
	ply
	rts

saveCurrentCallIds:
  phy
  php
  sep #$20
  ;save currentObjectId
  ldy #OOPR.id
  lda [tmp+1],y
  sta.l GLOBAL.currentObject
  sta.l GLOBAL.currentClass
  ;save currentMethodId
  ldy tmp+4
  lda [tmp+1],y
  sta.l GLOBAL.currentMethod
  ;save currentClassId
  iny
  lda [tmp+1],y

  plp
  ply
  rts


;x:obj id,y:method id
;used to call routines statically and relatively fast
staticFastCall:
	php
	phb
	phd
	;TODO	
	pld
	plb
	plp
	rts

dispatchObjBadHash:
    TRIGGER_ERROR E_ObjBadHash

dispatchObjMethodHashVoid:
	pld
	plb
	plp
	rts

;a:args,x:obj hash pointer,y:method to dispatch
core.object.call:
	php
	phb
	pea RAM << 8 | RAM
	plb
	plb
	phd
	rep #$31
	pha
	tdc
	
	pea ZP
	pld
	
	;map zp-adress to full ram adress.(this means supplied direct,full adresses can't be lower than $100)
	sta tmp
	txa
	cmp #$ff
	bcs dispatchMethNoZP

		clc		;add direct page pointer if supplied hash pointer is <$ff(=zp)
		adc tmp
		tax

dispatchMethNoZP:
	lda.w Hash.id,x
	and.w #$ff
	sta.l GLOBAL.currentObject
	sta.l GLOBAL.currentClass
	tya
	sta.l GLOBAL.currentMethod

	;copy parameters here
	lda 23,s
	sta tmp+18
	lda 21,s
	sta tmp+20
	lda 19,s
	sta tmp+22
	lda 17,s
	sta tmp+24
	lda 15,s
	sta tmp+26
	lda 13,s
	sta tmp+28
	lda 11,s
	sta tmp+30
	lda 9,s
	sta tmp+32
	pla	
	cpx #oopCreateNoPtr
	beq dispatchObjMethodHashVoid

	sta tmp+16
	lda.w Hash.pntr,x
	cmp #oopCreateNoPtr
	beq dispatchObjMethodHashVoid

	cmp #OopStackEnd
	bcs dispatchObjBadHash

	lda.w Hash.id,x
	and #$ff
	cmp #MAXOBJID
	bcs dispatchObjBadHash

	lda.w Hash.pntr,x
	phx
	phy
	txy
	tax
	sep #$20
	lda.l OopStack.flags,x
	bit #OBJECT.FLAGS.Present
	beq _objNotPresent

	lda.l OopStack.num,x
	xba
	lda.l OopStack.id,x
	rep #$31
	cmp.w Hash.id,y
	beq dispatchObjValidHash

    _objNotPresent:
    rep #$31
		;hash invalid, seek for moved obj in obj stack:
		ldx #0
		lda.w Hash.id,y
		jsr OopSeekObjCountId
		bcs dispatchObjUpdateHash
            TRIGGER_ERROR E_ObjNotFound
			
		dispatchObjUpdateHash:
		txa
		sta.w Hash.pntr,y	;update hash pointer with found matching obj-instance in obj stack 
		
dispatchObjValidHash:
	;hash is valid, object not deleted, ready to execute method:
	ply
	sty tmp+4
	plx
	lda.w Hash.id,x
	jsr OopObjFetchPointer
	ldy #OOPR.rCount	;method number out of range?
	lda [tmp+1],y
	and #$ff
	cmp tmp+4
	bcs dispatchObjValidMethod

        TRIGGER_ERROR E_ObjBadMethod


dispatchObjValidMethod:
	lda.w Hash.pntr,x
	tax

	lda tmp+4
	and #$ff
	sta tmp+4
	asl a
	clc
	adc tmp+4
	clc
	adc #OOPR.rInit
	clc
	adc tmp+1
	ldy tmp+16
	jsr OopHandlerExecute
	ror tmp+16	;restore saved carry return value. todo: write back into cpu status byte on stack
	bcs +  

	pld
	plb
	plp
	clc
	rts

+	pld
	plb
	plp
	sec
	rts

/**
 * check whether input pointer points to valid object. implicitly updates input hash pointer if object was relocated
 * 
 * @param x <int, 16bit>    hash pointer
 * 
 * @return c <bool> set if valid object present.
 */
oop.object.exists:
;a:args,x:obj hash pointer,y:method to dispatch

    php
    phb
    pea RAM << 8 | RAM
    plb
    plb
    phd
    rep #$31
    pha
    tdc
    
    pea ZP
    pld
    
    ;map zp-adress to full ram adress.(this means supplied direct,full adresses can't be lower than $100)
    sta tmp
    txa
    cmp #$ff
    bcs +
        clc     ;add direct page pointer if supplied hash pointer is <$ff(=zp)
        adc tmp
        tax

+
    pla 
    cpx #oopCreateNoPtr
    beq _isPresent.badHash

    lda.w Hash.pntr,x
    cmp #oopCreateNoPtr
    beq _isPresent.badHash

    cmp #OopStackEnd
    bcs _isPresent.badHash

    lda.w Hash.id,x
    and #$ff
    cmp #MAXOBJID
    bcs _isPresent.badHash

    lda.w Hash.pntr,x
    txy
    tax
    sep #$20
    lda.l OopStack.flags,x
    bit #OBJECT.FLAGS.Present
    beq _isPresent.objNotPresent

      lda.l OopStack.num,x
      xba
      lda.l OopStack.id,x
      rep #$31
      cmp.w Hash.id,y
      beq ++

    _isPresent.objNotPresent:
    rep #$31
        ;hash invalid, seek for moved obj in obj stack:
        ldx #0
        lda.w Hash.id,y
        jsr OopSeekObjCountId
        bcs +

_isPresent.badHash:
            pld
            plb
            plp
            clc
            rts
            

+       txa
        sta.w Hash.pntr,y   ;update hash pointer with found matching obj-instance in obj stack 
        
++
  pld
  plb
  plp
  sec
  rts

;generic obj-kill routine
kill:
	rep #$31
	lda #OBJR_kill
	sta 3,s
	rts

.ends

